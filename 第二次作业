#代码规范:    
***
##PHP代码必须放在`<?php ?>`标签或`<?= ?>`标签中。  
* 在操作的时候尽量把变量、类、函数的声明分开，通过`include`或`require`文件的方式来使用。  
* 最后要有一个空行，仅包含PHP代码的文件而且不能使用PHP关闭标签`?>`。 
* php中标记结束符`?>`自带结束符效果，但不建议使用结束符，php会自动从开始到结束全部认为是php代码。 不用`?>`可节省空间。
```  
<?php  
echo 'hello world';  

```  
  
* 每行末尾不能有空格，每行只能有一条语句 
*** 
##变量  
* 变量只是临时存储。
* php中需使用`$`命名变量，不需要其他关键字定义。 

``` 
<?php 
$v1=1;
echo $v1;

``` 
 
* php变量规则与其他语言相似。可多个变量同时命名。 
* 删除变量使用`unset(变量名字)`。 
 `unset($v1);` 
* 可以使用中文变量但不建议。 
* *** 
###预定义变量
* **$_GET **:获取所有表单以get方式提交的数据。
* **$_POST**:以post提交的信息。
* **$_REQUEST**:get和post提交的信息都会保存。
* $GLOBALS:php中所有的全局变量。
* **$_SERVER**:服务器信息。
* **$_SESSION**:session会话数据。
* **$_COOKIE**：cookie回话数据。
* $_ENV:环境信息。
* $_FILES:用户上传的文件信息。 
* ***
###可变量 
* 如果一个变量保存的值刚好是另一个变量的名字，那么可以通过访问一个变量得到另一个变量的值，只需在变量前再加一个$符号。

``` 
 <?php 
 
//可变变量 
$a='b'; 
$b='bb'; 
echo $$a; 
//1.找到$a,解析结果b，2.将前面$符号与结果b绑定：$b，3.解析 
 
```   
***
###变量传值 
* 值传递，引用传递 
 
```   

<?php 
 
 
// 值传递： 
$a=1; 
$b=$a; 
$b=2; 
echo $a,$b，'<br/c>';//**'<br/c>'**为换行操作


//引用传递 


$c=1; 
$d=&$c; //使用引用，取地址
$d=2; 
echo $c,$d; 

``` 
* **总体还是基于c语言。** 
* *** 
##常量 
* 不可改变的量，与其他语言相通。
* php（5.3）后有两种方式。
* 1.使用定义常量的函数： 
`define('常量名',常量值)`
* 5.3之后：
`const 常量名=值；`与c语言相同。  
```     
 <?php   
 define('pi'.3.14); 
const pi1=3.14   
define('-_-','smile'); 
echo constant('-_-');//可以 特殊访问
//echo -_- 错误 
``` 
* 常量不适应“$”符号
* 常量通常以大写字母开头（与变量以示区分）
* 常量规则比较松散，可以使用特殊字符，但要以define定义。 
* define与const区别在于访问权限。 
* 定义常量通常不区分大小写，但可以区分。
* 定义时必须赋值，之后不可改变值。 
* 常量会长时间占用内存
* 不允许修改的用常量，如大项目中的路径。 
* *** 
##系统常量 
*  PHP_VERSION:php版本号。
*  PHP_INT_SIZE:整形大学。
*  PHP_INT_MAX:整形能表示的最大值。(PHP中允许有负数，带负号）
*  ***
##魔术常量 
* 以双下划线开始+常量名+双下划线结束，值随环境变化，用户无法改变。
*  __DIR__：当初被执行脚本在电脑的绝对路径
*  __FILE__：当初被执行脚本在电脑的绝对路径（带自己文件的名字）
*  __NAMESPACE__：当前所属的行数
*  __CLASS__：当前所属的类
*  METHOD__当前所属的方式 
***
##内存 
* 栈区：程序可操作的内存部分（不存数据，运行程序代码）
* 代码区：存储程序的内存部分
* 数据区：存储普通数据（全局区和代码区）
* 堆区：存储复杂数据。
* 总体与其他语言相似
*** 
##命名空间和类  
***  
* 命名空间和类必须遵循PSR-4自动加载器标准。  
* 每个类都有自己的命名空间，且都在顶级命名空间下，类名必须使用驼峰式。此点与其他语言的命名方式相类似。  
```  
<?php      
namespace Vendor\Model;     
class Foo  
{    
}     
```   
* *** 
##数据类型 
* date type,在php中指的是存储数据本身的类型。
* 三大类把八小类
* objevt对象
* array数组
* resource 资源类型
* NULL
* 强制转换在变量前加一个括号，里面写上对应类型
	*NULL类型用unset()
* 判断类型函数：IS_XXX（函数名） 
* bool类型用var_dump结构查看
* var_dump(变量1，变量2)
* gerrype(变量名)：获取数据类型
* 强制转换是对数据值进行复制后进行处理（不改变实际存储内容）
* settpe会直接改变数据本身
* settyoe(变量名，类型)：设定数据类型
*** 
##整数类型 
* $a=123//10进制 
* $a=0b110//2进制 
* $a=0120//8进制 
* $a=0x120//16进制 
* 默认输出的php值会自动转换为10进制输出
* dec 十进制 
* bin二进制
* hex十六进制
* oct八进制
* 转换 decbin（）：十进制转二进制
*** 
##浮点型 
* $f=1..23 
* $f=1.23e10//科学计数法
*  尽量不用浮点数进行判断，存储的小数都不准确
*  ***
#boll类型用于判断 
* Empty():判断数据的值是否为“空”，不是NULL,为空返回true,不为空返回false 
* lsset():判断数据存储的变量是否存在，存在返回ture，不存在返回false
* *** 
##运算符基本相同 
* .  :连接运算符，将两个字符串连接到一起
* .= ：类比于+=
###错误抑制符 
* 在php中一些错误课提前预知，但无法避免，有不希望报错给用户，课使用错误抑制符
* @：在可能出错的表达式前使用  `@(内容)` 生产时（上市时） 
*** 
##三目运算符
* 格式： `表达式1？表达式2：表达式3；`
* 表达式1成立执行表达式2，否则执行表达式3
* 加括号是语法清晰
* ** 
##自操作符 
* ++
* --
* 与c相似 
* ****   
##流程
* 大体相同
* if
* do while
* while
* forecah  针对数组
* *** 
##流程控制代替语法
``` <table border=1>  
<?php for ($i=1;$i<10;$i++){?>
    <tr>  
        <?php for ($j=1;$j<$i;$j++){?>  
        <td>  
            <?php echo $j.'*'.$j.'='.$i*$j?>  
        </td>  
        <?php ?>  
    </tr>  
    <?php }?>  
</table> ``` 
##函数 
* date()按照指定格式对对应的时间戳（从1970年格林威治时间开始的秒数） 
* time():获取当前时间对应的时间戳 
* microtime()获取微秒级别的时间（压力测试) 
``` 
<?php
echo date('y年m月d日 h:i:s',12345678),'<br/r>';
echo time  (),'<br/>';
echo microtime(),'<br/>'; 
```
* 
*** 
##文件包括
* include 系统碰到一次执行一次 
* include_once 系统碰到多次，只执行一次。
*  include的错误级别较低不会阻止代码执行
*   require要求较高，出现代码错误不再执行require后面的代码。



